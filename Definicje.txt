Specyfikatory dostępu (ang. access specifiers):
    - public - Definicje dostępne są dla każdego
    - private - Dostęp jedynie wewnątrz klasy       (Klasy dziedzicące nie mają do nich dostępu)
    - protected - Podobnie do private               (Klasy dziedzicące mają do nich dostęp)

    - Jeśli nie został podany żaden z powyższych, ustawiany jest specyfikator domyślny - package access.
        Do składowych pakietowych mogą odwoływać się inne klasy z tego samego pakietu. Poza nim, widoczne są jako prywatne.


Tworzenie obiektu składowego - umieszczanie obiektu (powstałego z klasy) wewnątrz nowej klasy. Nowa klasa może być zbudowana z dowolenj liczby obiektów (niezależnie od ich typów), połączonych w dowolne kombinacje.

Kompozycja (ang. composition) - Tworzenie nowych klas, używając klas już istniejących.
Agregacja (ang. aggregation) - kompozycja, do której dochodzi dynamicznie (w czasie wykonywania programu). Określana jest jako relacja typu 'posiada'

Dziedziczenie (ang. inheritance) - Tworzy nowy typ który kopiuje wszystkie składowe i interfejs klasy bazowej. W porównaniu do kompozycji, nie zapewnia takiej samej elastyczności, ponieważ ograniczenia na powstałe z niego klasy powstają już w czasie kompilacji.

Typ bazowy - posiada cecy i zachowania wspólne dla wszystkich jego typów pochodnych
Typ pochodny - reprezentuje spbą różne sposoby realizacji idei zawartych w typie bazowym 

Klasa pochodna może rozszerzać bazową (ang. extends), dodając nowe metowy nie stanowiące części interfejsu klasy bazowej. Może również zmienić (przesłonić - ang. overlay) jej zachowanie na nowo definiując jej metody.

Rzutowanie w górę (ang. upcasting) - traktowanie typu pochodnego jakby był typem bazowym

Rzutowanie w dół (ang. downcasting) - jest wykonywane w czasie działania programu (nie można stwierdzić, co będzie pod wskazanym adresem)

Typy parametryzowane / Typy ogólne (ang. parametrized types / generics) - klasy, które kompilator automatycznie przystosowuje do pracy z określonymi typami-parametrami. Przykład:
ArrayList<String> aList = new ArrayList<String>();

Garbage collector - Rozwiązanie zwalniania pamięci obiektów w Javie. Wszystkie obiekty dziediczą po klasie bazowej 'Object', wszystkie można tworzyć jedynie przez dodanie ich na stertę (Specjalny przypadek stanowią typy podstawowe), GC obsługuje zwalnianie pamięci - dzięki mniejszej ilości decyzji do podjęcia i potencjalnych problemów (takich jak wycieki pamieci w C++), programowanie w Javie staje się prostsze niż w C++.

Obsługa wyjątków (ang. exception handling) - Wyjątek stanowi obiekt który zostaje wyrzucony w miejscu wystąpienia błędu i może zostać obsłużony przez 'procedurę obsługi wyjątku' (ang. exception hanldler) przygotowaną do obsługi danego typu błędu. Zgłaszanie wyjątku nie może zostać zignorowane

Współbieżność/Wielowątkowość (ang. concurrency/multithreading) - Idea dzielenia wykonywanego zadania na niezależne fragmenty. W czasie korzystania z zasobów wspólnych, wątek blokuje zasób, wykonuje swoje zadanie i zwalnia blokadę, udostępniając innym wątkom dostęp.




Pomimo traktowania wszystkiego jako obiekt, jego identyfikator (nazwa) jest tak na prawdę referencją do obiektu. Referencję do obiektu typu String można utworzyć albo z wykorzystaniem operatora 'new':
    String value = new String("qwerty"); - Tworzy referencję do obiektu i inicjuje ją

Utworzyć jedynie referencję:
    String = value;

Wykorzystać specyfikę Javy - łańcuch tekstowy może być zainicjowany poprzez podanie wartości obiektu w cudzysłowie: 
    String value = "qwerty"; 

Słowo kluczowe 'new' można przetłumaczyć jako "Utwórz jeden nowy obiekt określonego typu"



Przechowywanie danych:
    1. Rejestry - Najszybciej dostępna pamięć (znajduje się wewnątrz procesora). Liczba rejestrów jest ograniczona a Java nie zapewnia mechanizmów bezpośredniej kontroli nad rejestrami (W C/C++ można manipolować danymi na poziomie kompilatora) 
    2. Stos - Znajduje się wewnątrz pamięci RAM, ale jest też obsługiwany przez procesor poprzez 'wskaźnik stosu'. Wskaźnik jest przesuwanu w dół (zajmowanie nowego obszaru w pamięci) albo w górę (zwalnianie obszaru pamięci). Żeby wygenerować kod odpowiedzialny za przesuwanie wskaźnika stosu, kompilator Javy musi znać rozmiar i czas życia wszystkich danych przechowywanych na stosie podczas tworzenia programu. W pamięci stosu w szczególności przechowywane są referencje do obiektów (same obiekty nie są tam ładowane) 
    3. Sterta - Fragment pamięci ogólnego zastosowania (Również w RAM), do którego ładowane są wszystkie obiekty Javy w momencie wywołania operatora 'new'. W przeciwieństwie do Stosu kompilator nie musi znać ani rozmiaru ani czasu życia danych przechowywanych na Stercie. Przydzielenie pamięci sterty zajmuje więcej czasu niż w przypadku stosu
    4. Obszar Stałych - Wartości stałe są umieszczane bezpośrednio w kodzie programu (W ten sposób są zabezpieczone przed jakimikolwiek zmianami). W niektórych przypadkach mogą zostać wydzielone z kodu, przez co mogą znaleźć się w pamięci ROM - przykładami mogą tu być pule ciągów znaków. Wszystkie literały łańcuchowe i inne stałe łańcuchowe mogą być wyodrębnione przez kompilator z kodu i przeniesione do specjalnego obszaru stałych
    5. Obszar spoza RAM - Dwa przykłady to strumieniowanie obiektów (przekształcanie obiektu w strumień bajtów) i obiekty trwałe (umieszczane na dysku - zachowują swój stan nawet po zakończeniu programu). Oba sposoby zamieniają obiekty w w coś co może zostać przechowane na innym medium i w razie potrzeby przekształcone w postaci stałego obiektu umieszczonego w pamięci RAM.
    Obecnie Java obsługuje 'trwałość lekką' (ang. lightweight persistence).



Typy podstawowe - Java adaptuje rozwiązanie z C/C++ - Zamiast tworzyć nowy obiekt wykorzystując operator new (przydzielając tym samym pamięć na stercie), tworzy się zmienną 'automatyczną', która *nie jest referencją* i umieszcza ją na stosie (co jest znacznie wydajniejsze). Specyfika Javy określa dokładny i niezależny od architektury (W przeciwieństwie do większości języków) rozmiar każdego z typów podstawowych. Dzięki tej niezmienności Java zyskuje na przenośności pisanych w niej programów.

+---------+----------+-----------+----------------+---------------+
|  Nazwa  | Rozmiar  |    Min    |      Max       | Typ obiektowy |
+---------+----------+-----------+----------------+---------------+
| boolean | -        | -         | -              | Boolean       |     - Rozmiar boolean nie jest jawnie określony. Może przyjmować jedynie wartość true lub false
| char    | 16 bitów | Unicode 0 | Unicode 2^16-1 | Character     |
| byte    | 8 bitów  | -128      | +127           | Byte          |     - Wszystkie typy numeryczne są typami ze znakiem (ang. signed)
| short   | 16 bitów | -2^15     | +2^15-1        | Short         |
| int     | 32 bity  | -2^31     | +2^31-1        | Integer       |
| long    | 64 bity  | -2^63     | +2^63-1        | Long          |
| float   | 32 bity  | IEEE754   | IEEE754        | Float         |
| double  | 64 bity  | IEEE754   | IEEE754        | Double        |
| void    | -        | -         | -              | Void          |
+---------+----------+-----------+----------------+---------------+

Klasy opakowujące (Boolean, Character, Byte...), odpowiadające typom podstawowym, pozwalają na tworzenie na stercie obiektów reprezentujących te typy:
Boolean b = new Boolean(true);



Automatyczne pakowanie (ang. autoboxing) - mechanizm pozwalający na konwersję wartości typu podstawowego na postać obiektu:
Integer value = 123;

i odwrotnie:
int value = 123;


Liczby wysokiej precyzji: BigInteger, BigDecimal - nie posiadają swojego odpowiednika w typach podstawowych. Obie klasy posiadają metody pozwalające na operacje podobne do tych które możemy wykonać na typach podstawowych. Działanie będzie wolniejsze niż w przypadku int czy float, ale precyzja jest tu uzyskiwana kosztem czasu.
BigInteger - typ całkowity dowolnej precyzji (można przechowywać w nim zmienne całkowite dowolnych rozmiarów bez utraty jakichkolwiek informacji podczas obliczeń)
BigDecimal - typ stałoprzecinkowy dowolnej precyzji




Tablice
Java gwarantuje, że każda tablica zostanie zainicjowana i nie można wyjść poza jej obszar (W przeciwieństwie do C/C++ gdzie są one jedynie obszarami pamięci). Sprawdzanie zakresu i indeksu podczas pracy programu wymaga dodatkowej pamięci dla każdej tablicy, ale zyskujemy dzięki temu niezawodność i większą produktywność. Dodatkowo Java potrafi w niektórych przypadkach zoptymalizować odwołania do tablic.

Tworząc tablicę obiektów tworzymy de facto tablicę referencji do obiektów, z których każda jest automatycznie ustawiana na null (wyróżniona wartość pusta) a odwoływanie się do niezainicjowanej referencji prowadzi do komunikatu błędu. 
W przypadku tablicy typów podstawowych, kompulator zapewnia inicjalizację poprzez wyzerowanie obszaru przydzielonego tablicy.



Zasięg (ang. scope) - widoczność i czas życia zmiennych zdefiniowanych w jego ramach. Zmienna zdefiniowana w zasięgu jest dostęna tylko do miejsca jego zakończenia. W C, C++ i Javie zasięg jest określony przez nawiasy klamrowe:

{
    int a = 1;

    // Tylko 'a' dostępny

    {
        int b=2;

        // Obie zmienne dostępne
    }

    // Tylko 'a' dostępny
    // b - out of scope
}



W przeciwieństwie do typów podstawowych, obiekt istnieje również poza swoim zasięgiem:

{ 
    Integer value = new Integer(123);
}

Referencja 'value' przepadnie wraz z końcem zasięgu, natomiast obiekt typu Integer będzie wciąż zajmował przypisaną mu pamięć (ale nie będzie można już z niego skorzystać, bo utraciliśmy do niego referencję).

Obiekty utworzone z wykorzystaniem operatora new są przechowywane tak długo, jak długo są potrzebne. Odśmiecacz pamięci (ang. garbage collector) sprawdza wszystkie utworzone w ten sposób obiekty i wykrywa te, do których nie aktualnych referencji. Paimięć tych obiektów zostaje zwolniona, dzięki czemu może zostać ponownie wykorzystana przez kolejne. Programista nie musi dbać o zwalnianie pamięci - kiedy obiekt nie jest już używany ginie samoczynnie.






Tworzenie nowego 'typu' obiektu - Wykorzystujemy do tego słowo kluczowe 'class', po którym następuje nazwa nowego typu:

class TypeName { /* class body */ }

Z tak powstałej klasy (typu) można utworzyć nowy obiekt dzięki operatorowi new:

TypeName x = new TypeName();

Definiując nową klasę możemy w niej zamieścić dwa rodzaje elementów:
    - pola (zmienne, nazywane również danymi składowymi) - To obiekty dowolnych typów dostępne przy użyciu referencji, lub typy podstawowe. Kiedy mamy do czynienia z referencją do obiektu należy taką zmienną zainicjować (new)
    - metody (nazywane również funkcjami składowymi)

Każdy obiekt odpowiada za utrzymanie własnego obszaru pamięci dla swoich pól (które nie są współdzielone pomiędzy obiektami - scope)
Do pól można odwoływać się poprzez referencję obiektu, kropkę i nazwę pola: example.data  . W przypadku obiektu zawierającego w sobie inne obiekty, każdy kolejny łączymy kropką: example.dataContainer.value1  .

Jeśli pole jest jednym z typów podstawowych i nie zostanie jawnie zainicjowane, otrzymuje wartość domyślną:

+---------+------------------+
|  Nazwa  | Wartość domyślna |
+---------+------------------+
| boolean | false            |
| char    | '\u0000'         |
| byte    | (byte)0          |
| short   | (short)0         |
| int     | 0                |
| long    | 0L               |
| float   | 0.0f             |
| double  | 0.0d             |
+---------+------------------+

Wartości domyślne są ustawiane zawsze, kiedy zmienna stanowi składową klasy. Nie dotyczy to zmiennych lokalnych - tych, które nie są polami. Zmienna "int x" wewnątrz definicji metody nie będzie automatycznie inicjowana na domyślną wartość i będzie przechowywać w sobie wartość nieokreśloną. Podczas kompilacji otrzymamy informację o błędzie - 'zmienna może nie być zainicjowana'.




Metody
Metody w Javie określają komunikaty które może otrzymać obiekt. Każda metoda składa się na:
    - zwracany typ - typ wartości zwracanej po wywołaniu metody,
    - nazwę,
    - lista argumentów (sygnatura metody) - zawiera typy oraz nazwy informacji przekazywanych do metody. Przekazując obiekty do listy w rzeczywistości przekazujemy ich referencje (Za wyjątkiep typów podstawowych),
    - ciało metody

Metody w Javie mogą występować wyłącznie jako składowe klasy. Mogą być wywołane jedynie na rzecz obiektu (Wyjątek stawnowią metody statyczne - które można wywoływać na rzecz klasy, bez wymogu istnienia obiektu) a obiekt musi być do tego upoważniony. Do metod odwołujemy się analogicznie jak do pól, przy użyciu kropki, dodatkowo podając listę argumentów w nawiasach okrągłych:

exampleObject.exampleMethod("qwerty", 1, 2, 3);

Określane jest to mianem "wysyłania komunikatu do obiektu".



#return
Słowo kluczowe return odpowiada za opuszczenie metody, a jeśli ta zwraca jakąś wartość, to jest ona umieszczana tuż po nim. W przypadku metody typu 'void', return stanowi jedynie punkt wyjścia z metody (Dlatego nie jest wymagane użycie go na końcu ciała metody).


Widoczność nazw - celem uniknięcia kolizji nazw bibliotek, w przypadku Javy należy posługiwać się odwróconą nazwą domeny internetowej (Kropki oznaczają tu przejście do kolejnych podkatalogów). Nazwy pakietów pisane są małymi literami. Przykładowo dla domeny mycomain.com:

com.mydomain.utility.mylibrary
